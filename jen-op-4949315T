pipeline {

    agent {
        node {
            label 'master'
        }
    }

    environment {
        APP_NAME = "tanyonghe"
        APP_ENV  = "DEV"
    }

    stages {
        stage('Op-4949315t-S1') {
            steps {
                echo 'Starting Stage 1: QA Server Backup and Update'
                script {
                    try {
                        def IMAGE_NAME = "qa-bkup-image"
                        def CONTAINER_NAME = "4949315T-qa-svr"
                        
                        // Check if backup exist
                        echo "Checking and removing ${IMAGE_NAME}"
                        sh """
                            if docker images -q ${IMAGE_NAME} 2>/dev/null; then
                                echo "Removing old backup image: ${IMAGE_NAME}"
                                docker rmi -f ${IMAGE_NAME}
                            else
                                echo "No backup image found"
                            fi
                        """

                        def containerId = sh(script: """
                            docker ps -aq --filter "name=${CONTAINER_NAME}" | head -n 1
                        """, returnStdout: true).trim()
                        
                        if (!containerId) {
                            error "ERROR: Container ${CONTAINER_NAME} not found. Please check the container name."
                        }
                        
                        echo "Found container ID: ${containerId}"
                        
                        // Check if container is running
                        def isRunning = sh(script: """
                             if docker ps -q --filter "id=${containerId}" >/dev/null 2>&1; then
                                echo "RUNNING"
                            else
                                echo "STOPPED"
                            fi
                        """, returnStdout: true).trim()
                        
                        echo "Container status: ${isRunning}"
                        
                        if (isRunning == "RUNNING") {
                            echo "Container ${containerId} is running - creating backup"
                            sh """
                                docker commit ${containerId} ${IMAGE_NAME}
                                echo "Backup image created successfully: ${IMAGE_NAME}"
                            """
                        } else {
                            echo "Container ${containerId} is stopped - starting container first"
                            sh """
                                docker start ${containerId}
                                sleep 10
                                # Verify container started
                                if docker ps -q --filter "id=${containerId}" 2>/dev/null; then
                                    docker commit ${containerId} ${IMAGE_NAME}
                                    echo "Backup image created successfully: ${IMAGE_NAME}"
                                else
                                    echo "ERROR: Failed to start container ${containerId}"
                                    exit 1
                                fi
                            """
                        }
                        
                        // EXECUTE BOLT PLAN AFTER SUCCESSFUL BACKUP
                        echo "Executing Bolt plan on QA server..."
                        sh """
                            bolt script run operate/scripts/4949315T_script.sh --targets ${CONTAINER_NAME} -u runscript -p "Welcome2" --no-host-key-check --run-as root
                        """
                        
                        echo "Op-S1-4949315t: QA web server is backup and updated"
                    } catch (Exception e) {
                        echo "Error in Stage 1: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stage 1 failed: QA backup and update unsuccessful")
                    }
                }
            }
        }
        
        stage('Op-4949315t-S2') {
            steps {
                echo 'Starting Stage 2: Dependency installation and Web Test'
                script {
                    try {
                        echo "Installing required dependencies on master node"
                        echo "Performing web test on QA container via host VM"
                        
                        // Execute curl command to test the web server
                        sh """
                            curl -Is http://localhost:33200 | head -n 1 > /tmp/qa-result-file
                            echo "Web test result:"
                            cat /tmp/qa-result-file || echo "Result file not found"
                        """
                        
                        // Verify the test result
                        def testResult = sh(script: """
                            if [ -f /tmp/qa-result-file ]; then
                                cat /tmp/qa-result-file
                            else
                                echo "FILE_NOT_FOUND"
                            fi
                        """, returnStdout: true).trim()
                        
                        echo "Raw test result: '${testResult}'"
                        
                        if (testResult.contains("HTTP/1.1 200 OK")) {
                            echo "SUCCESS: Web test passed! QA server is responding correctly."
                            echo "Result file content: ${testResult}"
                        } else if (testResult == "FILE_NOT_FOUND") {
                            error "ERROR: Result file not found. Web test may have failed."
                        } else {
                            error "ERROR: Web test failed. Expected 'HTTP/1.1 200 OK' but got: ${testResult}"
                        }
                        
                        echo "Op-4949315t-S2: Checking on whether QA server is running after update"
                        
                    } catch (Exception e) {
                        echo "Error in Stage 2: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stage 2 failed: Dependency installation or web test unsuccessful")
                    }
                }
            }
        }
        
        stage('Op-4949315t-S3') {
            steps {
                echo 'Starting Stage 3: Code compilation and Deployment Decision'
                script {
                    try {
                        // Define variables within stage scope
                        def IMAGE_NAME = "qa-bkup-image"  // Your backup image name
                        def CONTAINER_NAME = "4949315T-qa-svr"
                        
                        def deploymentChoice = input(
                            id: 'DeploymentChoice', 
                            message: 'Choose deployment action:', 
                            parameters: [
                                choice(
                                    name: 'ACTION',
                                    choices: ['Proceed to Roll out to Prod server', 'Roll back QA server'],
                                    description: 'Select deployment action based on QA server status'
                                )
                            ]
                        )
                        
                        echo "User selected: ${deploymentChoice}"
                        
                        if (deploymentChoice == 'Proceed to Roll out to Prod server') {
                            def containerId = sh(script: """
                                    docker ps -aq --filter "name=${CONTAINER_NAME}" | head -n 1
                            """, returnStdout: true).trim()
                            
                            if (!containerId) {
                                error "ERROR: Container ${CONTAINER_NAME} not found. Please check the container name."
                            }
                            
                            echo "Found container ID: ${containerId}"
                            
                            // Check if container is running
                            def isRunning = sh(script: """
                                if docker ps -q --filter "id=${containerId}" >/dev/null 2>&1; then
                                    echo "RUNNING"
                                else
                                    echo "STOPPED"
                                fi
                            """, returnStdout: true).trim()
                            
                            echo "Container status: ${isRunning}"
                            
                            if (isRunning == "RUNNING") {
                                echo "Op-4949315t-S3: Proceed to roll out to Prod server"
                            } else {
                                error "ERROR: Cannot proceed to Prod - QA server is not running. Please choose rollback instead."
                            }                            
                        } else if (deploymentChoice == 'Roll back QA server') {                            
                            def backupExists = sh(script: """
                                docker images -q ${IMAGE_NAME} 2>/dev/null > /dev/null && echo "EXISTS" || echo "NOT_EXISTS"
                            """, returnStdout: true).trim()
                            
                            if (backupExists == "EXISTS") {
                                echo "Rolling back QA server using backup image: ${IMAGE_NAME}"
                                
                                sh """
                                    if docker ps -q --filter "name=${CONTAINER_NAME}" 2>/dev/null; then
                                        echo "Stopping current container: ${CONTAINER_NAME}"
                                        docker stop ${CONTAINER_NAME}
                                    fi
                                    if docker ps -aq --filter "name=${CONTAINER_NAME}" 2>/dev/null; then
                                        echo "Removing current container: ${CONTAINER_NAME}"
                                        docker rm ${CONTAINER_NAME}
                                    fi
                                    
                                    echo "Starting rolled back container with full configuration"
                                    docker run -d -it \
                                        --network customnetwork \
                                        --privileged \
                                        -p 33200:80 \
                                        -h 4949315T-qa-svr.localdomain \
                                        --name ${CONTAINER_NAME} \
                                        --add-host=sddo-vm.localdomain:172.20.113.176 \
                                        --ip=192.168.100.110 \
                                        --mount source=4949315T-qa-svr-vol01,target=/mnt/4949315T-qa-svr-vol01 \
                                        ${IMAGE_NAME} \
                                        /sbin/init
                                    
                                    sleep 10
                                    if docker ps -q --filter "name=${CONTAINER_NAME}" 2>/dev/null; then
                                        echo "Rollback successful: Container ${CONTAINER_NAME} is running from backup image"
                                        echo "Container is running with full network configuration and privileged mode"
                                    else
                                        echo "WARNING: Container may not have started properly. Checking status..."
                                        docker ps -a --filter "name=${CONTAINER_NAME}"
                                        error "Container failed to start during rollback"
                                    fi
                                """
                            } else {
                                error "ERROR: Backup image ${IMAGE_NAME} not found. Cannot perform rollback."
                            }
                            
                            echo "Op-4949315t-S3: QA server fails after update and is rolled back"

                            // Abort all subsequent stages
                            error('Aborting all subsequent stages due to QA server rollback')
                            
                        } else {
                            error "ERROR: Invalid deployment choice selected"
                        }
                        
                    } catch (Exception e) {
                        if (e.getMessage().contains('Aborting all subsequent stages')) {
                            echo "Rollback completed. Subsequent stages aborted as expected."
                            currentBuild.result = 'UNSTABLE'
                            throw e
                        } else {
                            echo "Error in Stage 3: ${e.getMessage()}"
                            currentBuild.result = 'FAILURE'
                            error("Stage 3 failed: ${e.getMessage()}")
                        }
                    }
                }
            }
        }
        
        stage('Op-4949315t-S4') {
            steps {
                echo 'Starting Stage 4: Prod Server Backup and Update'
                script {
                    try {
                        def IMAGE_NAME = "prod-bkup-image"
                        def CONTAINER_NAME = "4949315T-prod-svr"
                        
                        // Check if backup exist
                        echo "Checking and removing ${IMAGE_NAME}"
                        sh """
                            if docker images -q ${IMAGE_NAME} 2>/dev/null; then
                                echo "Removing old backup image: ${IMAGE_NAME}"
                                docker rmi -f ${IMAGE_NAME}
                            else
                                echo "No backup image found"
                            fi
                        """

                        def containerId = sh(script: """
                            docker ps -aq --filter "name=${CONTAINER_NAME}" | head -n 1
                        """, returnStdout: true).trim()
                        
                        if (!containerId) {
                            error "ERROR: Container ${CONTAINER_NAME} not found. Please check the container name."
                        }
                        
                        echo "Found container ID: ${containerId}"
                        
                        // Check if container is running
                        def isRunning = sh(script: """
                             if docker ps -q --filter "id=${containerId}" >/dev/null 2>&1; then
                                echo "RUNNING"
                            else
                                echo "STOPPED"
                            fi
                        """, returnStdout: true).trim()
                        
                        echo "Container status: ${isRunning}"
                        
                        if (isRunning == "RUNNING") {
                            echo "Container ${containerId} is running - creating backup"
                            sh """
                                docker commit ${containerId} ${IMAGE_NAME}
                                echo "Backup image created successfully: ${IMAGE_NAME}"
                            """
                        } else {
                            echo "Container ${containerId} is stopped - starting container first"
                            sh """
                                docker start ${containerId}
                                sleep 10
                                # Verify container started
                                if docker ps -q --filter "id=${containerId}" 2>/dev/null; then
                                    docker commit ${containerId} ${IMAGE_NAME}
                                    echo "Backup image created successfully: ${IMAGE_NAME}"
                                else
                                    echo "ERROR: Failed to start container ${containerId}"
                                    exit 1
                                fi
                            """
                        }
                        
                        // EXECUTE BOLT PLAN AFTER SUCCESSFUL BACKUP
                        echo "Executing Bolt plan on Prod server..."
                        sh """
                            bolt script run operate/scripts/4949315T_script.sh --targets ${CONTAINER_NAME} -u runscript -p "Welcome2" --no-host-key-check --run-as root
                        """
                        
                        echo "Op-4949315t-S4: Prod web server is backup and updated"
                    } catch (Exception e) {
                        echo "Error in Stage 4: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stage 4 failed: Prod backup and update unsuccessful")
                    }
                }
            }
        }
        
        stage('Op-4949315t-S5') {
            steps {
                echo 'Starting Stage 5: Dependency installation and Web Test'
                script {
                    try {
                        echo "Installing required dependencies on master node"
                        echo "Performing web test on Prod container via host VM"
                        
                        // Execute curl command to test the web server
                        sh """
                            curl -Is http://localhost:33500 | head -n 1 > /tmp/prod-result-file
                            echo "Web test result:"
                            cat /tmp/prod-result-file || echo "Result file not found"
                        """
                        
                        // Verify the test result
                        def testResult = sh(script: """
                            if [ -f /tmp/prod-result-file ]; then
                                cat /tmp/prod-result-file
                            else
                                echo "FILE_NOT_FOUND"
                            fi
                        """, returnStdout: true).trim()
                        
                        echo "Raw test result: '${testResult}'"
                        
                        if (testResult.contains("HTTP/1.1 200 OK")) {
                            echo "SUCCESS: Web test passed! Prod server is responding correctly."
                            echo "Result file content: ${testResult}"
                        } else if (testResult == "FILE_NOT_FOUND") {
                            error "ERROR: Result file not found. Web test may have failed."
                        } else {
                            error "ERROR: Web test failed. Expected 'HTTP/1.1 200 OK' but got: ${testResult}"
                        }
                        
                        echo "Op-4949315t-S5: Checking on whether Prod server is running after update"
                        
                    } catch (Exception e) {
                        echo "Error in Stage 5: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stage 5 failed: Dependency installation or web test unsuccessful")
                    }
                }
            }
        }
        
        stage('Op-4949315t-S6') {
            steps {
                echo 'Starting Stage 6: Build artifact creation'
                script {
                    echo "Creating build artifacts on master"
                }
            }
        }
        
        stage('Op-4949315t-S7') {
            steps {
                echo 'Starting Stage 7: Deployment or final steps'
                script {
                    echo "Finalizing pipeline execution"
                    echo "Pipeline Op-4949315t completed successfully"
                }
            }
        }
    }
}
