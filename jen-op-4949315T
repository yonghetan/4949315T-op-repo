pipeline {

    agent {
        node {
            label 'master'
        }
    }

    environment {
        APP_NAME = "tanyonghe"
        APP_ENV  = "DEV"
    }

    stages {
        stage('Op-4949315t-S1') {
            steps {
                echo 'Starting Stage 1: QA Server Backup and Update'
                script {
                    try {
                        def IMAGE_NAME = "qa-bkup-image"
                        def CONTAINER_NAME = "4949315T-qa-svr"
                        
                        // Check if backup exist
                        echo "Checking and removing ${IMAGE_NAME}"
                        sh """
                            if docker images -q ${IMAGE_NAME} 2>/dev/null; then
                                echo "Removing old backup image: ${IMAGE_NAME}"
                                docker rmi -f ${IMAGE_NAME}
                            else
                                echo "No backup image found"
                            fi
                        """

                        def containerId = sh(script: """
                            docker ps -aq --filter "name=${CONTAINER_NAME}" | head -n 1
                        """, returnStdout: true).trim()
                        
                        if (!containerId) {
                            error "ERROR: Container ${CONTAINER_NAME} not found. Please check the container name."
                        }
                        
                        echo "Found container ID: ${containerId}"
                        
                        // Check if container is running
                        def isRunning = sh(script: """
                            if docker ps -q --filter "id=${containerId}" 2>/dev/null; then
                                echo "RUNNING"
                            else
                                echo "STOPPED"
                            fi
                        """, returnStdout: true).trim()
                        
                        echo "Container status: ${isRunning}"
                        
                        if (isRunning == "RUNNING") {
                            echo "Container ${containerId} is running - creating backup"
                            sh """
                                docker commit ${containerId} ${IMAGE_NAME}
                                echo "Backup image created successfully: ${IMAGE_NAME}"
                            """
                        } else {
                            echo "Container ${containerId} is stopped - starting container first"
                            sh """
                                docker start ${containerId}
                                sleep 10
                                # Verify container started
                                if docker ps -q --filter "id=${containerId}" 2>/dev/null; then
                                    docker commit ${containerId} ${IMAGE_NAME}
                                    echo "Backup image created successfully: ${IMAGE_NAME}"
                                else
                                    echo "ERROR: Failed to start container ${containerId}"
                                    exit 1
                                fi
                            """
                        }
                        
                        echo "Op-S1-4949315t: QA web server is backup and updated"
                        
                    } catch (Exception e) {
                        echo "Error in Stage 1: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stage 1 failed: QA backup and update unsuccessful")
                    }
                }
            }
        }
        
        stage('Op-4949315t-S2') {
            steps {
                echo 'Starting Stage 2: Dependency installation and Web Test'
                script {
                    try {
                        echo "Installing required dependencies on master node"
                        echo "Performing web test on QA container via host VM"
                        
                        // Execute curl command to test the web server
                        sh """
                            curl -Is http://localhost:33200 | head -n 1 > /tmp/qa-result-file
                            echo "Web test result:"
                            cat /tmp/qa-result-file || echo "Result file not found"
                        """
                        
                        // Verify the test result
                        def testResult = sh(script: """
                            if [ -f /tmp/qa-result-file ]; then
                                cat /tmp/qa-result-file
                            else
                                echo "FILE_NOT_FOUND"
                            fi
                        """, returnStdout: true).trim()
                        
                        echo "Raw test result: '${testResult}'"
                        
                        if (testResult.contains("HTTP/1.1 200 OK")) {
                            echo "SUCCESS: Web test passed! QA server is responding correctly."
                            echo "Result file content: ${testResult}"
                        } else if (testResult == "FILE_NOT_FOUND") {
                            error "ERROR: Result file not found. Web test may have failed."
                        } else {
                            error "ERROR: Web test failed. Expected 'HTTP/1.1 200 OK' but got: ${testResult}"
                        }
                        
                        echo "Op-4949315t-S2: Checking on whether QA server is running after update"
                        
                    } catch (Exception e) {
                        echo "Error in Stage 2: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stage 2 failed: Dependency installation or web test unsuccessful")
                    }
                }
            }
        }
        
        stage('Op-4949315t-S3') {
            steps {
                echo 'Starting Stage 3: Code compilation'
                script {
                    echo "Compiling the application on master"
                }
            }
        }
        
        stage('Op-4949315t-S4') {
            steps {
                echo 'Starting Stage 4: Testing phase'
                script {
                    echo "Running tests on master node"
                }
            }
        }
        
        stage('Op-4949315t-S5') {
            steps {
                echo 'Starting Stage 5: Code analysis'
                script {
                    echo "Performing code analysis"
                }
            }
        }
        
        stage('Op-4949315t-S6') {
            steps {
                echo 'Starting Stage 6: Build artifact creation'
                script {
                    echo "Creating build artifacts on master"
                }
            }
        }
        
        stage('Op-4949315t-S7') {
            steps {
                echo 'Starting Stage 7: Deployment or final steps'
                script {
                    echo "Finalizing pipeline execution"
                    echo "Pipeline Op-4949315t completed successfully"
                }
            }
        }
    }
}
